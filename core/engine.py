import subprocess
import time
import os
import glob
import csv
import json
from datetime import datetime
import yaml
from data.database import SkinportDatabase
from core.deal_finder import find_best_deals
from core.visualizations import generate_deals_dashboard
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler("bot_engine.log"),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –ü–æ–ª—É—á–∞–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ –∫–æ—Ä–Ω—é –ø—Ä–æ–µ–∫—Ç–∞
PROJECT_ROOT = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
CONFIG_PATH = os.path.join(PROJECT_ROOT, 'config.yaml')
if not os.path.exists(CONFIG_PATH):
    raise FileNotFoundError(f"Config file not found: {CONFIG_PATH}")

with open(CONFIG_PATH, 'r') as f:
    config = yaml.safe_load(f)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—É—Ç–µ–π
JS_DIR = os.path.join(PROJECT_ROOT, "markets")
DATA_DIR = os.path.join(PROJECT_ROOT, "data")
MARKET_DATA_CSV = os.path.join(DATA_DIR, "market_data.csv")  # –ê–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å
ITEMS_DIR = os.path.join(DATA_DIR, "skinport-items")
HISTORY_DIR = os.path.join(DATA_DIR, "skinport-history")
BEST_DEALS_CSV = os.path.join(DATA_DIR, "best_deals.csv")    # –ê–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å
DASHBOARD_DIR = os.path.join(DATA_DIR, "dashboard")          # –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º –¥–ª—è deal_finder
deal_finder_config = config.get('deal_finder', {})
trading_config = config.get('trading', {})

min_price = trading_config.get('min_item_price', 0.0)
max_price = trading_config.get('max_item_price', 10.0)
min_volume = deal_finder_config.get('min_volume', trading_config.get('min_volume', 5))
discount_threshold = deal_finder_config.get('discount_threshold', -5.0)

def create_directories():
    """–°–æ–∑–¥–∞–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"""
    os.makedirs(ITEMS_DIR, exist_ok=True)
    os.makedirs(HISTORY_DIR, exist_ok=True)
    os.makedirs(DASHBOARD_DIR, exist_ok=True)  # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞
    logger.info(f"üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å–æ–∑–¥–∞–Ω—ã:\n- {ITEMS_DIR}\n- {HISTORY_DIR}\n- {DASHBOARD_DIR}")

def get_latest_file(directory):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–æ–∑–¥–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"""
    files = glob.glob(os.path.join(directory, "*.json"))
    if not files:
        return None
    return max(files, key=os.path.getctime)

def run_skinport_js(script_name, timeout=180):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç JS-—Å–∫—Ä–∏–ø—Ç —Å —Ç–∞–π–º–∞—É—Ç–æ–º"""
    js_path = os.path.join(JS_DIR, script_name)
    
    if not os.path.exists(js_path):
        raise FileNotFoundError(f"JS —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {js_path}")
    
    try:
        logger.info(f"–ó–∞–ø—É—Å–∫ JS-—Å–∫—Ä–∏–ø—Ç–∞: {script_name}")
        result = subprocess.run(
            ["node", js_path],
            cwd=PROJECT_ROOT,
            capture_output=True,
            text=True,
            timeout=timeout
        )
        return result
    except subprocess.TimeoutExpired:
        logger.error(f"JS —Å–∫—Ä–∏–ø—Ç {script_name} –ø—Ä–µ–≤—ã—Å–∏–ª –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è ({timeout} —Å–µ–∫)")
        return subprocess.CompletedProcess(
            args=["node", js_path],
            returncode=-1,
            stdout="",
            stderr=f"Timeout after {timeout} seconds"
        )

def update_database():
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ñ–∞–π–ª–æ–≤"""
    try:
        latest_items = get_latest_file(ITEMS_DIR)
        latest_history = get_latest_file(HISTORY_DIR)
        
        if not latest_items:
            logger.warning("–§–∞–π–ª—ã –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        if not latest_history:
            logger.warning("–§–∞–π–ª—ã –∏—Å—Ç–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        if not latest_items or not latest_history:
            return
        
        logger.info(f"üîÑ –û–±–Ω–æ–≤–ª—è—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö:")
        logger.info(f"- Items: {os.path.basename(latest_items)}")
        logger.info(f"- History: {os.path.basename(latest_history)}")
        
        db = SkinportDatabase(latest_items, latest_history, MARKET_DATA_CSV)
        db.update_database()
        
        logger.info(f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
    except Exception as e:
        logger.error(f"‚õî –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–∞–∑—ã: {str(e)}")

def run_deal_finder():
    """–ò—â–µ—Ç –ª—É—á—à–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ CSV"""
    if not config.get('deal_finder', {}).get('enabled', True):
        logger.info("üîç –ü–æ–∏—Å–∫ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –æ—Ç–∫–ª—é—á–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
        return 0
        
    logger.info("üîç –ü–æ–∏—Å–∫ –ª—É—á—à–∏—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π...")
    try:
        deals_count = find_best_deals(
            input_csv=MARKET_DATA_CSV,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å
            output_csv=BEST_DEALS_CSV,   # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å
            discount_threshold=discount_threshold,
            min_volume=min_volume,
            min_price=min_price,
            max_price=max_price
        )
        logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –≤—ã–≥–æ–¥–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: {deals_count}")
        return deals_count
    except Exception as e:
        logger.error(f"‚õî –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: {str(e)}")
        return 0

def check_deals_file():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –≤—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏"""
    if not os.path.exists(BEST_DEALS_CSV):
        logger.warning(f"–§–∞–π–ª –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω: {BEST_DEALS_CSV}")
        return 0
    
    try:
        with open(BEST_DEALS_CSV, 'r', encoding='utf-8') as f:
            reader = csv.DictReader(f)
            deals = list(reader)
            logger.info(f"–§–∞–π–ª {BEST_DEALS_CSV} —Å–æ–¥–µ—Ä–∂–∏—Ç {len(deals)} –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π")
            
            if deals:
                logger.info("–ü—Ä–∏–º–µ—Ä—ã –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π:")
                for i, deal in enumerate(deals[:3]):  # –ü–æ–∫–∞–∑–∞—Ç—å –ø–µ—Ä–≤—ã–µ 3
                    logger.info(f"{i+1}. {deal['item']} - –¶–µ–Ω–∞: {deal['current_price']} {deal.get('currency', 'EUR')}")
            
            return len(deals)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: {str(e)}")
        return 0

def check_history_data():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –≤—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö (–∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–æ –ø–æ–¥ –Ω–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É)"""
    history_files = glob.glob(os.path.join(HISTORY_DIR, "*.json"))
    if not history_files:
        logger.warning("–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return 0
    
    latest_history = max(history_files, key=os.path.getctime)
    logger.info(f"–ü–æ—Å–ª–µ–¥–Ω–∏–π —Ñ–∞–π–ª –∏—Å—Ç–æ—Ä–∏–∏: {os.path.basename(latest_history)}")
    
    try:
        with open(latest_history, 'r', encoding='utf-8') as f:
            history_data = json.load(f)
            logger.info(f"–§–∞–π–ª –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç {len(history_data)} –ø—Ä–µ–¥–º–µ—Ç–æ–≤")
            
            if history_data:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
                sample_item = history_data[0]
                logger.info(f"–ü—Ä–∏–º–µ—Ä —ç–ª–µ–º–µ–Ω—Ç–∞ –∏—Å—Ç–æ—Ä–∏–∏:")
                logger.info(f" - –ò–º—è: {sample_item.get('market_hash_name')}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞ –ø–µ—Ä–∏–æ–¥—ã
                for period in ['last_24_hours', 'last_7_days', 'last_30_days', 'last_90_days']:
                    period_data = sample_item.get(period, {})
                    min_price = period_data.get('min', 'N/A')
                    volume = period_data.get('volume', 'N/A')
                    logger.info(f" - {period}: –º–∏–Ω={min_price}, –æ–±—ä–µ–º={volume}")
            
            return len(history_data)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –∏—Å—Ç–æ—Ä–∏–∏: {str(e)}")
        return 0

def generate_dashboard():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–∞—à–±–æ—Ä–¥ —Å –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–µ–π –¥–∞–Ω–Ω—ã—Ö"""
    if not config.get('visualization', {}).get('enabled', True):
        logger.info("–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
        return 0
    
    logger.info("\nüìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏...")
    try:
        deals_count = generate_deals_dashboard(
            best_deals_csv=BEST_DEALS_CSV,
            history_dir=HISTORY_DIR,
            items_dir=ITEMS_DIR,
            output_dir=DASHBOARD_DIR
        )
        dashboard_path = os.path.join(DASHBOARD_DIR, "best_deals_dashboard.html")
        logger.info(f"‚úÖ –î–∞—à–±–æ—Ä–¥ —Å–æ–∑–¥–∞–Ω: {dashboard_path} (–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: {deals_count})")
            
        if deals_count == 0:
            logger.warning("‚ö†Ô∏è –ù–∞ –¥–∞—à–±–æ—Ä–¥–µ –Ω–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π. –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
            logger.warning("1. –ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∏–º–µ–Ω –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –º–µ–∂–¥—É best_deals.csv –∏ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏")
            logger.warning("2. –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–¥–∞–∂–∞—Ö –¥–ª—è –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤")
            logger.warning("3. –û—à–∏–±–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö")
        
        return deals_count
    except Exception as e:
        logger.error(f"‚õî –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∞—à–±–æ—Ä–¥–∞: {str(e)}")
        return 0

def run_engine():
    """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞"""
    try:
        logger.info("\n" + "="*50)
        logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ Skinport")
        logger.info(f"‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {CONFIG_PATH}")
        logger.info(f"üìÇ –ö–æ—Ä–Ω–µ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {PROJECT_ROOT}")
        logger.info(f"üíæ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {MARKET_DATA_CSV}")
        logger.info(f"üíé –õ—É—á—à–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: {BEST_DEALS_CSV}")
        logger.info(f"üìä –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–∞—à–±–æ—Ä–¥–∞: {DASHBOARD_DIR}")
        logger.info("="*50 + "\n")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ JS —Ñ–∞–π–ª–æ–≤
        items_js = os.path.join(JS_DIR, "skinport_items.js")
        history_js = os.path.join(JS_DIR, "skinport_history.js")
        
        if not os.path.exists(items_js):
            raise FileNotFoundError(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {items_js}")
        if not os.path.exists(history_js):
            raise FileNotFoundError(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {history_js}")
        
        create_directories()
        items_counter = 0
        last_history_update = 0
        
        while True:
            current_time = time.time()
            timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
            logger.info(f"\n{timestamp} –ù–∞—á–∞–ª–æ —Ü–∏–∫–ª–∞")
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
            logger.info("\nüîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤...")
            items_result = run_skinport_js("skinport_items.js")
            items_counter += 1
            
            logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç ({items_counter}):")
            if items_result.stdout:
                logger.info(items_result.stdout.strip())
            if items_result.stderr:
                logger.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {items_result.stderr.strip()}")
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Ä–∞–∑ –≤ 24 —á–∞—Å–∞
            if current_time - last_history_update > 86400:  # 24 —á–∞—Å–∞
                logger.info("\nüïí –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –ø—Ä–æ–¥–∞–∂...")
                history_result = run_skinport_js("skinport_history.js")
                
                logger.info("–†–µ–∑—É–ª—å—Ç–∞—Ç:")
                if history_result.stdout:
                    logger.info(history_result.stdout.strip())
                if history_result.stderr:
                    logger.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {history_result.stderr.strip()}")
                
                last_history_update = current_time
                next_update_time = datetime.fromtimestamp(last_history_update + 86400).strftime('%Y-%m-%d %H:%M')
                logger.info(f"‚è±Ô∏è –°–ª–µ–¥—É—é—â–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏: {next_update_time}")
            else:
                next_update_time = datetime.fromtimestamp(last_history_update + 86400).strftime('%Y-%m-%d %H:%M')
                logger.info(f"‚è≥ –ò—Å—Ç–æ—Ä–∏—è –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {next_update_time}")
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            logger.info("\nüìä –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
            update_database()
            
            # –ü–æ–∏—Å–∫ –ª—É—á—à–∏—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
            logger.info("\nüîç –ü–æ–∏—Å–∫ –ª—É—á—à–∏—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π...")
            deals_count = run_deal_finder()
            
            # –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –¥–∞—à–±–æ—Ä–¥–∞
            logger.info("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞...")
            actual_deals_count = check_deals_file()
            history_items_count = check_history_data()
            
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
            generate_dashboard()
            
            # –û–∂–∏–¥–∞–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ü–∏–∫–ª–∞
            wait_time = config.get('update_interval', 500)
            logger.info(f"\n‚è≥ –°–ª–µ–¥—É—é—â–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ {wait_time} —Å–µ–∫—É–Ω–¥...")
            time.sleep(wait_time)
            
    except Exception as e:
        logger.error(f"\n‚ùå‚ùå‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {str(e)}")
        logger.error("="*50)
        import traceback
        logger.error(traceback.format_exc())

if __name__ == "__main__":
    run_engine()