import subprocess
import time
import os
import glob
from datetime import datetime
import yaml  # –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω pyyaml (pip install pyyaml)
from data.database import SkinportDatabase
from core.deal_finder import find_best_deals
import logger
from core.visualizations import generate_deals_dashboard
# –ü–æ–ª—É—á–∞–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ –∫–æ—Ä–Ω—é –ø—Ä–æ–µ–∫—Ç–∞
PROJECT_ROOT = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
CONFIG_PATH = os.path.join(PROJECT_ROOT, 'config.yaml')
if not os.path.exists(CONFIG_PATH):
    raise FileNotFoundError(f"Config file not found: {CONFIG_PATH}")

with open(CONFIG_PATH, 'r') as f:
    config = yaml.safe_load(f)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—É—Ç–µ–π
JS_DIR = os.path.join(PROJECT_ROOT, "markets")
DATA_DIR = os.path.join(PROJECT_ROOT, "data")
ITEMS_DIR = os.path.join(DATA_DIR, "skinport-items")
HISTORY_DIR = os.path.join(DATA_DIR, "skinport-history")
OUTPUT_CSV = os.path.join(DATA_DIR, "skinport_market_analysis.csv")
BEST_DEALS_CSV = os.path.join(DATA_DIR, "best_deals.csv")

def create_directories():
    """–°–æ–∑–¥–∞–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏, –µ—Å–ª–∏ –æ–Ω–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç"""
    os.makedirs(ITEMS_DIR, exist_ok=True)
    os.makedirs(HISTORY_DIR, exist_ok=True)
    print(f"üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å–æ–∑–¥–∞–Ω—ã:\n- {ITEMS_DIR}\n- {HISTORY_DIR}")

def get_latest_file(directory):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–æ–∑–¥–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"""
    files = glob.glob(os.path.join(directory, "*.json"))
    if not files:
        return None
    return max(files, key=os.path.getctime)

def run_skinport_js(script_name, timeout=120):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç JS-—Å–∫—Ä–∏–ø—Ç —Å —Ç–∞–π–º–∞—É—Ç–æ–º"""
    js_path = os.path.join(JS_DIR, script_name)
    
    if not os.path.exists(js_path):
        raise FileNotFoundError(f"JS —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {js_path}")
    
    try:
        result = subprocess.run(
            ["node", js_path],
            cwd=PROJECT_ROOT,
            capture_output=True,
            text=True,
            timeout=timeout  # –¢–∞–π–º–∞—É—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        )
        return result
    except subprocess.TimeoutExpired:
        logger.error(f"JS —Å–∫—Ä–∏–ø—Ç {script_name} –ø—Ä–µ–≤—ã—Å–∏–ª –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è ({timeout} —Å–µ–∫)")
        return subprocess.CompletedProcess(
            args=["node", js_path],
            returncode=-1,
            stdout="",
            stderr=f"Timeout after {timeout} seconds"
        )

def update_database():
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ñ–∞–π–ª–æ–≤"""
    try:
        latest_items = get_latest_file(ITEMS_DIR)
        latest_history = get_latest_file(HISTORY_DIR)
        
        if not latest_items or not latest_history:
            return
        
        print(f"üîÑ –û–±–Ω–æ–≤–ª—è—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö:")
        print(f"- Items: {os.path.basename(latest_items)}")
        print(f"- History: {os.path.basename(latest_history)}")
        
        db = SkinportDatabase(latest_items, latest_history, OUTPUT_CSV)
        db.update_database()
        
        print(f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
    except Exception as e:
        print(f"‚õî –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–∞–∑—ã: {str(e)}")

def run_deal_finder():
    """–ò—â–µ—Ç –ª—É—á—à–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ CSV"""
    if not config.get('deal_finder', {}).get('enabled', True):
        return 0
        
    print("üîç –ü–æ–∏—Å–∫ –ª—É—á—à–∏—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π...")
    try:
        deals_count = find_best_deals(
            input_csv=OUTPUT_CSV,
            output_csv=BEST_DEALS_CSV,
            discount_threshold=config['deal_finder'].get('discount_threshold', -12),
            min_volume=config['deal_finder'].get('min_volume', 3)
        )
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –≤—ã–≥–æ–¥–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: {deals_count}")
        return deals_count
    except Exception as e:
        print(f"‚õî –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: {str(e)}")
        return 0

def run_engine():
    """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"""
    try:
        print("\n" + "="*50)
        print(f"üöÄ –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ Skinport")
        print(f"‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {CONFIG_PATH}")
        print(f"üìÇ –ö–æ—Ä–Ω–µ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {PROJECT_ROOT}")
        print(f"üíæ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {OUTPUT_CSV}")
        print(f"üíé –õ—É—á—à–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: {BEST_DEALS_CSV}")
        print("="*50 + "\n")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ JS —Ñ–∞–π–ª–æ–≤
        items_js = os.path.join(JS_DIR, "skinport_items.js")
        history_js = os.path.join(JS_DIR, "skinport_history.js")
        
        if not os.path.exists(items_js):
            raise FileNotFoundError(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {items_js}")
        if not os.path.exists(history_js):
            raise FileNotFoundError(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {history_js}")
        
        create_directories()
        items_counter = 0
        last_history_update = 0
        
        while True:
            current_time = time.time()
            timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
            print(f"\n{timestamp} –ù–∞—á–∞–ª–æ —Ü–∏–∫–ª–∞")
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
            print("\nüîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤...")
            items_result = run_skinport_js("skinport_items.js")
            items_counter += 1
            
            print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç ({items_counter}):")
            if items_result.stdout:
                print(items_result.stdout.strip())
            if items_result.stderr:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {items_result.stderr.strip()}")
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Ä–∞–∑ –≤ 24 —á–∞—Å–∞
            if current_time - last_history_update > 86400:  # 24 —á–∞—Å–∞
                print("\nüïí –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –ø—Ä–æ–¥–∞–∂...")
                history_result = run_skinport_js("skinport_history.js")
                
                print("–†–µ–∑—É–ª—å—Ç–∞—Ç:")
                if history_result.stdout:
                    print(history_result.stdout.strip())
                if history_result.stderr:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {history_result.stderr.strip()}")
                
                last_history_update = current_time
                print(f"‚è±Ô∏è –°–ª–µ–¥—É—é—â–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏: {datetime.fromtimestamp(last_history_update + 86400).strftime('%Y-%m-%d %H:%M')}")
            else:
                next_update = datetime.fromtimestamp(last_history_update + 86400).strftime('%Y-%m-%d %H:%M')
                print(f"‚è≥ –ò—Å—Ç–æ—Ä–∏—è –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {next_update}")
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            print("\nüìä –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
            update_database()
            
            # –ü–æ–∏—Å–∫ –ª—É—á—à–∏—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
            run_deal_finder()

            if config.get('visualization', {}).get('enabled', True):
                print("\nüìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏...")
                dashboard_dir = os.path.join(DATA_DIR, "dashboard")
                deals_count = generate_deals_dashboard(
                    best_deals_csv=BEST_DEALS_CSV,
                    items_dir=ITEMS_DIR,
                    output_dir=dashboard_dir
                )
                dashboard_path = os.path.join(dashboard_dir, "best_deals_dashboard.html")
                print(f"‚úÖ –î–∞—à–±–æ—Ä–¥ —Å–æ–∑–¥–∞–Ω: {dashboard_path} (–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: {deals_count})")
            
            # –û–∂–∏–¥–∞–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ü–∏–∫–ª–∞
            wait_time = config.get('update_interval', 120)
            print(f"\n‚è≥ –°–ª–µ–¥—É—é—â–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ {wait_time} —Å–µ–∫—É–Ω–¥...")
            time.sleep(wait_time)
            
    except Exception as e:
        print(f"\n‚ùå‚ùå‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {str(e)}")
        print("="*50)
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    run_engine()